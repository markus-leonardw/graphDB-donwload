(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{140:function(e,t,r){"use strict";r.r(t);var o=r(75);const a={OBDA:"obdaFile",OWL:"owlFile",CONSTRAINT:"constraintFile",LENSES:"lensesFile",DB_METADATA:"dbMetadataFile"};class n{constructor(e="generic"){this.driverType=e,this.hostName="",this.port=void 0,this.databaseName="",this.username="",this.password="",this.driverClass="",this.url="",this.urlUserInput=""}}class i{constructor(e,t=!1){this.type=e,this.fileName="",this.loading=!1,this.required=t}}class s extends Error{}const l="generic",p="dremio",c="databricks",d="snowflake";class m{constructor(){this.classAvailable=!1,this.downloadDriverUrl="",this.driverClass="",this.driverName="",this.driverType="",this.portRequired=!1,this.urlTemplate=""}static isGenericDriver(e){return e===l}static isSnowflakeDriver(e){return e===d}}function f(e,t,r,f,u){return{restrict:"E",scope:!1,templateUrl:"js/angular/repositories/templates/ontop-repo.html",link:function(v){v.isGenericDriver=!0,v.defaultUrlTemplate="jdbc:database://localhost:port/database_name",v.ontopProperiesLink="https://ontop-vkg.org/guide/advanced/configuration.html",v.ontopFileType=a,v.selectedDriver=new m,v.supportedDriversData=[],v.formData={connectionInformation:new n,settings:{additionalProperties:"",ontopFiles:[]}},v.selectDriver=e=>{v.selectedDriver=v.supportedDriversData.find(t=>t.driverType===e),v.isGenericDriver=m.isGenericDriver(v.selectedDriver.driverType),v.editRepoPage&&v.currentOntopRepoInfo&&v.currentOntopRepoInfo.connectionInformation.driverType===e?v.formData=_.cloneDeep(v.currentOntopRepoInfo):(k(),v.formData.connectionInformation.driverType=v.selectedDriver.driverType),v.formData.connectionInformation.driverClass=v.selectedDriver.driverClass,v.updateUrl()},v.getOntopFileInfo=e=>v.formData.settings.ontopFiles.find(t=>e===t.type),v.getHostNameLabel=()=>{const e=m.isSnowflakeDriver(v.selectedDriver.driverType)?"ontop.repo.database.snowflake.host_name":"ontop.repo.database.host_name";return u.instant(e)+"*"},v.getDatabaseNameLabel=()=>{let e="";switch(v.selectedDriver.driverType){case d:e="ontop.repo.database.warehouse.database_name";break;case c:e="ontop.repo.database.http_path.database_name";break;case p:e="ontop.repo.database.schema.database_name";break;default:e="ontop.repo.database.database_name"}return u.instant(e)},v.updateUrl=()=>{const e=h()||"";v.formData.connectionInformation.url=e+v.formData.connectionInformation.urlUserInput},v.isTestConnectionDisabled=()=>{const e=v.formData.connectionInformation,t=v.selectedDriver;return!(e.driverClass&&e.url&&(!t.portRequired||e.port))||!(m.isGenericDriver(t.driverType)||e.hostName&&e.databaseName)},v.testConnection=()=>{w().then(R).then(T).then(P).then(F).then(b).then(()=>t.validateOntopPropertiesConnection(v.repositoryInfo)).then(()=>r.success(u.instant("ontop.repo.successful.connection.msg"))).catch(e=>{e instanceof s?r.error(e.message):N(u.instant("ontop.repo.failed.to.connect"),e)})},v.editFile=r=>{const a=v.repositoryInfo.params[r.type].label,n=u.instant("update.file.edit.content.header",{fileName:a});e.open({templateUrl:"js/angular/templates/modal/editRepoFile.html",controller:"EditRepositoryFileCtrl",windowClass:"update-ontop-repo-dialog",resolve:{file:()=>{const e=v.repositoryInfo.params[r.type];return e?e.value:""},dialogTitle:()=>n}}).result.then(e=>{t.updateRepositoryFileContent(e.fileLocation,e.content,v.repositoryInfo.location).success(e=>{r.fileName=Object(o.getFileName)(e.fileLocation),v.repositoryInfo.params[r.type].value=e.fileLocation}).error(e=>{N(u.instant("common.error"),e)})})},v.uploadOntopFile=(e,t)=>{if(e&&e.length){const o=e[0];t.loading=!0;const a={url:"rest/repositories/file/upload",data:{file:o,location:v.repositoryInfo.location}};f.upload(a).success(e=>{e.success?(t.fileName=o.name,v.repositoryInfo.params[t.type].value=e.fileLocation):r.error(e.errorMessage)}).error(e=>{N(u.instant("common.error"),e),v.uploadFile=""}).finally(()=>{t.loading=!1})}},v.updateOntopRepo=()=>{const e=v.editRepoPage?v.editRepository:v.createRepo;O().then(w).then(R).then(T).then(P).then(F).then(C).then(b).then(e).catch(e=>{e instanceof s?r.error(e.message):console.log(e)})},v.onKeyDownInUrlInput=e=>{const t=e.keyCode;if(37===t||39===t||36===t||35===t)return;const r=h();if(!r)return;const o=e.ctrlKey||e.metaKey;if(o&&65===t||o&&67===t)return;const a=e.target.selectionStart;8===t&&a-1<r.length&&(e.preventDefault(),e.stopPropagation()),a<r.length&&(e.preventDefault(),e.stopPropagation())},v.onKeyUpInUrlInput=()=>{D()};const D=()=>{const e=h();e&&v.formData.connectionInformation.url.startsWith(e)?v.formData.connectionInformation.urlUserInput=v.formData.connectionInformation.url.substring(e.length):v.formData.connectionInformation.urlUserInput=v.formData.connectionInformation.url},h=()=>m.isSnowflakeDriver(v.selectedDriver.driverType)?I():g(),I=()=>{let e=v.selectedDriver.urlTemplate;const t=v.formData.connectionInformation;return t.hostName&&(e=e.replace("{identifier}",t.hostName)),t.port&&(e=e.replace(".snowflakecomputing.com/?",`.snowflakecomputing.com:${t.port}/?`)),t.databaseName&&(e=e.replace("{database}",t.databaseName)),e},g=()=>{let e=v.selectedDriver.urlTemplate;const t=v.formData.connectionInformation;return t.hostName&&(e=t.port?e.replace("{hostport}",`${t.hostName}:${t.port}`):e.replace("{hostport}",""+t.hostName)),t.databaseName&&(e=e.replace("{database}",t.databaseName)),e},y=e=>{v.formData.settings.ontopFiles.forEach(t=>{t.loading=e})},b=()=>{y(!0);const e=v.formData.connectionInformation,r={hostName:e.hostName,port:e.port,databaseName:e.databaseName,userName:e.username,password:e.password,driverClass:e.driverClass,url:e.url,additionalProperties:v.formData.settings.additionalProperties};return t.updatePropertiesFile(v.repositoryInfo.params.propertiesFile.value,r,v.repositoryInfo.location,v.selectedDriver.driverType).success(e=>{v.repositoryInfo.params.propertiesFile.value=e.fileLocation}).error(e=>{N(u.instant("common.error"),e)}).finally(()=>y(!1))},N=(e,t)=>{const o=getError(t);r.error(o,e)},w=()=>m.isGenericDriver(v.selectedDriver.driverType)||v.formData.connectionInformation.hostName?Promise.resolve():Promise.reject(new s(u.instant("missing.required.field",{fieldName:u.instant("ontop.repo.database.host_name")}))),T=()=>m.isGenericDriver(v.selectedDriver.driverType)||v.formData.connectionInformation.databaseName?Promise.resolve():Promise.reject(new s(u.instant("missing.required.field",{fieldName:u.instant("ontop.repo.database.database_name")}))),P=()=>v.formData.connectionInformation.driverClass?Promise.resolve():Promise.reject(new s(u.instant("missing.required.field",{fieldName:u.instant("ontop.repo.database.driver_class")}))),F=()=>v.formData.connectionInformation.url?Promise.resolve():Promise.reject(new s(u.instant("missing.required.field",{fieldName:u.instant("ontop.repo.database.url")}))),O=()=>v.repositoryInfo.id?Promise.resolve():Promise.reject(new s(u.instant("empty.repoid.warning"))),C=()=>v.getOntopFileInfo(a.OBDA).fileName?Promise.resolve():Promise.reject(new s(u.instant("ontop.repo.missing.required.file",{fileName:v.repositoryInfo.params[a.OBDA].label}))),R=()=>v.selectedDriver.portRequired&&!v.formData.connectionInformation.port?Promise.reject(new s(u.instant("missing.required.field",{fieldName:u.instant("ontop.repo.database.port")}))):Promise.resolve(),k=()=>{v.formData={connectionInformation:new n,settings:{additionalProperties:"",ontopFiles:[]}},Object.values(a).forEach(e=>{const t=new i(e);v.formData.settings.ontopFiles.push(t)}),v.getOntopFileInfo(a.OBDA).required=!0};t.getSupportedDriversData(v.repositoryInfo).success(e=>{v.supportedDriversData=e}).error(e=>{N(u.instant("common.error"),e)}).then(()=>{v.editRepoPage?(y(!0),t.loadPropertiesFile(v.repositoryInfo.params.propertiesFile.value,v.repositoryInfo.location,v.selectedDriver.driverType).success(e=>{let t=v.supportedDriversData.find(t=>t.driverClass===e.driverClass);t&&e.hostName||(t=v.supportedDriversData.find(e=>m.isGenericDriver(e.driverType))),v.selectDriver(t.driverType),v.formData.connectionInformation.driverType=t.driverType,v.formData.connectionInformation.driverClass=e.driverClass,v.formData.connectionInformation.password=e.password,v.formData.connectionInformation.username=e.userName,v.formData.connectionInformation.url=e.url,v.formData.settings.additionalProperties=e.additionalProperties,m.isGenericDriver(t.driverType)||(v.formData.connectionInformation.hostName=e.hostName,v.formData.connectionInformation.databaseName=e.databaseName,v.formData.connectionInformation.port=e.port?parseInt(e.port,10):void 0),D(),v.updateUrl(),Object.values(a).forEach(e=>{const t=v.repositoryInfo.params[e],r=v.getOntopFileInfo(e);t&&(r.fileName=Object(o.getFileName)(t.value))}),v.currentOntopRepoInfo=_.cloneDeep(v.formData)}).error(e=>{N(u.instant("common.error"),e)}).finally(()=>{y(!1)})):v.selectDriver(l)})}}}angular.module("graphdb.framework.repositories.ontop-repo.directive",[]).directive("ontopRepo",f),f.$inject=["$uibModal","RepositoriesRestService","toastr","Upload","$translate"]}}]);